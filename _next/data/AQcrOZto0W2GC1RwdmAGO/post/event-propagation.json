{"pageProps":{"post":{"__typename":"Post","title":"Event Propagation","slug":"event-propagation","description":"When you do a google search various events have been triggered, from you writing what you are looking for to clicking the best result of the search, those interactions can be called events.","date":"2022-03-12","coverImage":{"__typename":"Asset","url":"https://media.graphcms.com/pmiCisp6TAyssz4k6pY6","width":4000,"height":3000,"handle":"pmiCisp6TAyssz4k6pY6"},"coverImageAlt":"Bubbles below the ocean (Photo by Linda Heyworth from Pexels)","content":{"__typename":"RichText","raw":{"children":[{"type":"heading-one","children":[{"text":"Event"}]},{"type":"paragraph","children":[{"text":"When you do a google search various events have been triggered, from you writing what you are looking for to clicking the best result of the search, those interactions can be called events."}]},{"type":"paragraph","children":[{"text":"But they not only comes from a user interaction they also can be called programmatically, using the "},{"code":true,"text":"dispatchEvent()"},{"text":" or calling the method "},{"code":true,"text":"click()"},{"text":" of an element e.g "},{"code":true,"text":"HTMLElement.click()"}]},{"type":"paragraph","children":[{"text":"different from the ones triggered by the browser via user interaction, events triggered this way is called \"synthetic events\"."}]},{"type":"heading-one","children":[{"text":"Event Bubbling and Capturing"}]},{"type":"code-block","children":[{"text":"$html$\n⁠<section onClick=\"console.log('handle section')\">\n⁠  <div onClick=\"console.log('handle div')\">\n⁠    <p onClick=\"console.log('handle p')\">hey i'm a child</p>\n  ⁠</div>\n⁠</section>"}]},{"type":"paragraph","children":[{"text":"On the example above we have 3 nested elements, with it's own handlers in this case the "},{"code":true,"text":"onClick"}]},{"type":"paragraph","children":[{"text":"if I click on the child element "},{"code":true,"text":"<p />"},{"text":" the event of clicking will trigger its "},{"code":true,"text":"onClick"},{"text":" handler but will also bubble up to it's parent elements and trigger their own handlers, that makes sense because if we look at the content rendered, when we click on anything inside the "},{"code":true,"text":"<section />"},{"text":" we are somehow clicking on the "},{"code":true,"text":"<section />"},{"text":" itself."}]},{"type":"paragraph","children":[{"text":"Now if we go a little back in time, microsoft and netscape came into different conclusions:"}]},{"type":"paragraph","children":[{"text":"1. Microsoft said that the innermost element should be triggered first then the outer ones, that's called "},{"bold":true,"text":"Event Bubbling"},{"text":";"}]},{"type":"paragraph","children":[{"text":"2. Netscape said that the outermost element should be triggered first and then the inner ones, that's called "},{"bold":true,"text":"Event Capturing"},{"text":";"}]},{"type":"paragraph","children":[{"text":"Nowadays all modern browsers support both and the only way to change whether Bubble or Capture is using a listener"}]},{"type":"code-block","children":[{"text":"$javascript$\n⁠myElement.addEventListener(\"click\", () => { \n  ⁠/* block to execute when triggered */\n⁠}, true) // Event Capture"}]},{"type":"code-block","children":[{"text":"$javascript$\n⁠myElement.addEventListener(\"click\", () => { \n  ⁠/* block to execute when triggered */\n⁠}, false) // Event Bubble *default*"}]},{"type":"paragraph","children":[{"text":"An interesting thing here is that the propagation will always happen so when working on a very complex DOM tree the bubbling may impact on performance even if there is no other handler found while \"bubbling\", thus we may end having to disable the propagation using the "},{"code":true,"text":"stopPropagation()"},{"text":" method"}]},{"type":"code-block","children":[{"text":"$javascript$\n⁠myElement.addEventListener(\"click\", (e) => { \n⁠  e.stopPropagation() \n⁠})"}]},{"type":"heading-one","children":[{"text":"Conclusion"}]},{"type":"paragraph","children":[{"text":"Event propagation order can interfere on which order your handlers is being triggered. By default de event will bubble up from the innermost to the outermost element, if that's not a desired behavior we can change and use Capture passing "},{"code":true,"text":"true"},{"text":" as the third parameter of an event listener, also if needed we can disable the propagation with the "},{"code":true,"text":"event.stopPropagation()"},{"text":" method."}]},{"type":"heading-two","children":[{"text":"References"}]},{"type":"paragraph","children":[{"text":""},{"href":"https://developer.mozilla.org/en-US/docs/Web/Events","type":"link","children":[{"text":"MDN Event reference"}],"openInNewTab":true},{"text":"\n"},{"href":"https://www.quirksmode.org/js/events_order.html","type":"link","children":[{"text":"Quirksmode Events order"}]},{"text":""}]}]}},"tags":["javascript","html","web","event propagation","event bubbling","event capture"]}},"__N_SSG":true}