{"pageProps":{"post":{"__typename":"Post","title":"4 Conceitos básicos de POO","slug":"4-conceitos-basicos-de-poo","description":"Neste post utilizarei os exemplos em python mas os conceitos de POO (Programação Orientada a Objetos) são \"universais\"","date":"2022-01-07","coverImage":{"__typename":"Asset","url":"https://media.graphcms.com/hirPCJTMqT8L2jDyWyg4","width":1600,"height":900,"handle":"hirPCJTMqT8L2jDyWyg4"},"coverImageAlt":"cover with little bears and python logo","content":{"__typename":"RichText","raw":{"children":[{"type":"paragraph","children":[{"text":"Neste post utilizarei os exemplos em python mas os conceitos de POO (Programação Orientada a Objetos) são \"universais\"."}]},{"type":"paragraph","children":[{"text":"1 - Encapsulamento (encapsulation):"}]},{"type":"paragraph","children":[{"text":"O objetivo de \"encapsular\" o código é fazer com que tudo o que esteja dentro de determinado bloco de código só possa ser manipulado naquele bloco, em python para definir esse bloco de código utilizamos a palavra "},{"code":true,"text":"classe","italic":true},{"text":". para exemplificar melhor vamos criar uma classe pessoa "}]},{"type":"code-block","children":[{"text":"$python$\n⁠class People {\n⁠    ⁠def __init__(self):\n⁠}"}]},{"type":"paragraph","children":[{"text":"todo ser humano é da espécie Homo Sapiens e tem diversos atributos (nome, idade, peso etc) aqui o nome você provavelmente também realiza ações como andar e falar essas ações em POO são chamadas de métodos"}]},{"type":"code-block","children":[{"text":"$python$\n⁠class People:\n⁠⁠    species = 'Homo Sapiens' \n⁠\n    def __init__(self, name):\n⁠⁠    ⁠    self.name = name\n⁠\n⁠    def speak(self, msg):\n⁠⁠    ⁠    print(\"{who} disse: {msg}\".format(who=self.name, msg=msg))\n⁠\n    def walk(self):\n⁠⁠    ⁠    print(People.species + \" esta andando...\")"}]},{"type":"paragraph","children":[{"text":"como você pode ver a cima, definimos o atributo nome e também os métodos "},{"code":true,"text":"speak","italic":true},{"text":" e "},{"code":true,"text":"walk","italic":true},{"text":", aqui já podemos ver o encapsulamento em ação, todos os dados que eu manipulei dentro da classe são relacionados a pessoa"}]},{"type":"code-block","children":[{"text":"$python$\n⁠if __name__ == '__main__':\n⁠⁠    person = People(name='joao', cpf='1234')\n⁠⁠    print(person.name) # joao\n⁠⁠    person.speak('as fumaças falarão por mim') # \"joao disse: as fumaças falarão por mim\"\n⁠⁠    person.walk() # \"Homo Sapiens esta andando...\""}]},{"type":"paragraph","children":[{"text":"note que na instancia person temos acesso aos métodos e também ao atributo "},{"code":true,"text":"name","italic":true},{"text":" da pessoa. Agora imagine que existe um método que possibilita a pessoa de comprar algo, para o bem da simplicidade vamos definir, que, para realizar a compra ela vai precisar passar o número do seu CPF e algum item"}]},{"type":"code-block","children":[{"text":"$python$\n⁠class People:\n    [...]\n\n    def __init__(self, name, cpf):\n⁠⁠    ⁠    self.name = name\n⁠⁠    ⁠    self.cpf = cpf\n\n    [...]\n\n    def buy(self, item):\n⁠⁠    ⁠    if (self.cpf):\n⁠⁠    ⁠    print(\"{who} comprou {item}\".format(who=self.name, item=item))"}]},{"type":"code-block","children":[{"text":"if __name__ == '__main__':\n⁠⁠    person = People(name='joao', cpf='1234')\n⁠⁠    person.buy('agua') # joao comprou agua\n⁠⁠    print(person.cpf) # 1234"}]},{"type":"paragraph","children":[{"text":"como você pode ver acima é possível por meio da instancia "},{"code":true,"text":"person","italic":true},{"text":" para acessar o CPF, aqui o encapsulamento entra em ação mais uma vez, como o CPF é um dado sigiloso não queremos que ele fique disponível para ser acessado por ai, então vamos fazer com que esse atributo seja privado"}]},{"type":"code-block","children":[{"text":"$python$\n⁠  [...]\n\ndef __init__(self, name, cpf):\n⁠    self.name = name \n⁠    self.__cpf = cpf\n\n  [...]\n\ndef buy(self, item):\n⁠    if (self.__cpf):\n⁠        print(\"{who} comprou {item}\".format(who=self.name, item=item))\n\nif __name__ == '__main__': \n⁠    person = People(name='joao', cpf='1234')\n⁠    person.buy('agua') # joao comprou agua⁠\n⁠⁠    print(person.__cpf) # AttributeError: 'People' object has no attribute '__cpf'\n⁠⁠    print(person.cpf) # AttributeError: 'People' object has no attribute 'cpf'"}]},{"type":"paragraph","children":[{"text":"dessa maneira os dados que fazem sentido serem manipulados apenas dentro da instancia ficam "}]},{"type":"paragraph","children":[{"text":"\"blindados\" dentro da classe, e também poderíamos criar até métodos privados caso necessário."}]}]}},"tags":["POO"," pogramação orientada a objetos","python"]}},"__N_SSG":true}